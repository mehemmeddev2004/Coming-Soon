import { NextRequest, NextResponse } from 'next/server';

const BASE_URL = 'https://etor.onrender.com/api/category';

// üîπ POST: Kateqoriya yenil…ôm…ôk
export async function POST(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await params;
    const body = await request.json();

    const headers: Record<string, string> = {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
    };

    const token = request.headers.get('authorization');
    if (token) headers['Authorization'] = token;

    const res = await fetch(`${BASE_URL}/${id}/categoryId`, {
      method: 'POST',
      headers,
      body: JSON.stringify(body),
    });

    const text = await res.text();
    const data = safeParse(text);

    if (!res.ok) {
      return NextResponse.json(
        { message: data?.message || 'Kateqoriya yenil…ôn…ôrk…ôn x…ôta ba≈ü verdi' },
        { status: res.status }
      );
    }

    return NextResponse.json(data, { status: res.status });
  } catch (error) {
    return NextResponse.json(
      {
        message: '≈û…ôb…ôk…ô x…ôtasƒ± - Kateqoriya yenil…ôn…ô bilm…ôdi',
        error: error instanceof Error ? error.message : 'Unknown error',
      },
      { status: 503 }
    );
  }
}

// üîπ DELETE: Kateqoriya silm…ôk
export async function DELETE(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await params;

    const headers: Record<string, string> = {
      'Accept': 'application/json',
    };

    const token = request.headers.get('authorization');
    if (token) headers['Authorization'] = token;

    const res = await fetch(`${BASE_URL}/${id}/categoryId`, {
      method: 'DELETE',
      headers,
    });

    const text = await res.text();
    const data = safeParse(text);

    if (!res.ok) {
      return NextResponse.json(
        { message: data?.message || 'Kateqoriya silin…ôrk…ôn x…ôta ba≈ü verdi' },
        { status: res.status }
      );
    }

    return NextResponse.json(data, { status: res.status });
  } catch (error) {
    return NextResponse.json(
      {
        message: '≈û…ôb…ôk…ô x…ôtasƒ± - Kateqoriya silin…ô bilm…ôdi',
        error: error instanceof Error ? error.message : 'Unknown error',
      },
      { status: 503 }
    );
  }
}

// ‚úÖ JSON parse helper
function safeParse(text: string) {
  try {
    return JSON.parse(text);
  } catch {
    return { message: 'Backend JSON cavabƒ± g√∂nd…ôrm…ôdi' };
  }
}
